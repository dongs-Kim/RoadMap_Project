import { Roadmap } from 'src/entities/roadmap.entity';
import { RoadmapEdge } from 'src/entities/roadmap_edge.entity';
import { RoadmapItem } from 'src/entities/roadmap_item.entity';
import { User } from 'src/entities/user.entity';
import { DataSource, Repository } from 'typeorm';
import { SaveRoadmapDto } from './dto/save-roadmap.dto';
export declare class RoadmapsService {
    private roadmapsRepository;
    private usersRepository;
    private dataSource;
    constructor(roadmapsRepository: Repository<Roadmap>, usersRepository: Repository<User>, dataSource: DataSource);
    findAll(): Promise<Roadmap[]>;
    findOneSet(id: string, mode?: string, user?: User): Promise<SaveRoadmapDto>;
    findMyAll(user: User): Promise<{
        User: {
            id: string;
            email: string;
            nickname: string;
            comment?: string;
            image?: string;
            created_at: Date;
            updated_at: Date;
            Roadmaps: Roadmap[];
            Replies: import("../entities/reply.entity").Reply[];
            LikeRoadmaps: Roadmap[];
            StoredRoadmaps: Roadmap[];
        };
        like: number;
        reply: number;
        id: string;
        category: string;
        public: boolean;
        title: string;
        contents?: string;
        thumbnail?: string;
        bgcolor?: string;
        created_at: Date;
        updated_at: Date;
        RoadmapItems: RoadmapItem[];
        RoadmapEdges: RoadmapEdge[];
        StoringUsers: User[];
    }[]>;
    findHomeListByCount(category: string): Promise<{
        User: {
            id: string;
            email: string;
            nickname: string;
            comment?: string;
            image?: string;
            created_at: Date;
            updated_at: Date;
            Roadmaps: Roadmap[];
            Replies: import("../entities/reply.entity").Reply[];
            LikeRoadmaps: Roadmap[];
            StoredRoadmaps: Roadmap[];
        };
        like: number;
        reply: number;
        id: string;
        category: string;
        public: boolean;
        title: string;
        contents?: string;
        thumbnail?: string;
        bgcolor?: string;
        created_at: Date;
        updated_at: Date;
        RoadmapItems: RoadmapItem[];
        RoadmapEdges: RoadmapEdge[];
        StoringUsers: User[];
    }[]>;
    findCategory(category: string): Promise<{
        User: {
            id: string;
            email: string;
            nickname: string;
            comment?: string;
            image?: string;
            created_at: Date;
            updated_at: Date;
            Roadmaps: Roadmap[];
            Replies: import("../entities/reply.entity").Reply[];
            LikeRoadmaps: Roadmap[];
            StoredRoadmaps: Roadmap[];
        };
        like: number;
        reply: number;
        id: string;
        category: string;
        public: boolean;
        title: string;
        contents?: string;
        thumbnail?: string;
        bgcolor?: string;
        created_at: Date;
        updated_at: Date;
        RoadmapItems: RoadmapItem[];
        RoadmapEdges: RoadmapEdge[];
        StoringUsers: User[];
    }[]>;
    findByUser(Userid: string): Promise<{
        User: {
            id: string;
            email: string;
            nickname: string;
            comment?: string;
            image?: string;
            created_at: Date;
            updated_at: Date;
            Roadmaps: Roadmap[];
            Replies: import("../entities/reply.entity").Reply[];
            LikeRoadmaps: Roadmap[];
            StoredRoadmaps: Roadmap[];
        };
        like: number;
        reply: number;
        id: string;
        category: string;
        public: boolean;
        title: string;
        contents?: string;
        thumbnail?: string;
        bgcolor?: string;
        created_at: Date;
        updated_at: Date;
        RoadmapItems: RoadmapItem[];
        RoadmapEdges: RoadmapEdge[];
        StoringUsers: User[];
    }[]>;
    remove(id: string, user: User): Promise<boolean>;
    like(id: string, user: User): Promise<void>;
    unlike(roadmap_id: string, user: User): Promise<void>;
    isLike(id: string, user: User): Promise<boolean>;
    save(user: User, { roadmap, nodes, edges, mode }: SaveRoadmapDto): Promise<boolean>;
    uploadThumbnail(id: string, url: string): Promise<void>;
    removeThumbnail(id: string): void;
}
