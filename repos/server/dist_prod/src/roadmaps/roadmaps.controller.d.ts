/// <reference types="multer" />
import { RoadmapsService } from './roadmaps.service';
import { User as UserEntity } from 'src/entities/user.entity';
import { SaveRoadmapDto } from './dto/save-roadmap.dto';
export declare class RoadmapsController {
    private readonly roadmapsService;
    constructor(roadmapsService: RoadmapsService);
    create(user: UserEntity, saveRoadmapDto: SaveRoadmapDto): Promise<boolean>;
    findAll(): Promise<import("../entities/roadmap.entity").Roadmap[]>;
    findMyAll(user: UserEntity): Promise<{
        User: {
            id: string;
            email: string;
            nickname: string;
            comment?: string;
            image?: string;
            created_at: Date;
            updated_at: Date;
            Roadmaps: import("../entities/roadmap.entity").Roadmap[];
            Replies: import("../entities/reply.entity").Reply[];
            LikeRoadmaps: import("../entities/roadmap.entity").Roadmap[];
            StoredRoadmaps: import("../entities/roadmap.entity").Roadmap[];
        };
        like: number;
        reply: number;
        id: string;
        category: string;
        public: boolean;
        title: string;
        contents?: string;
        thumbnail?: string;
        bgcolor?: string;
        created_at: Date;
        updated_at: Date;
        RoadmapItems: import("../entities/roadmap_item.entity").RoadmapItem[];
        RoadmapEdges: import("../entities/roadmap_edge.entity").RoadmapEdge[];
        StoringUsers: UserEntity[];
    }[]>;
    findCategory(category: string): Promise<{
        User: {
            id: string;
            email: string;
            nickname: string;
            comment?: string;
            image?: string;
            created_at: Date;
            updated_at: Date;
            Roadmaps: import("../entities/roadmap.entity").Roadmap[];
            Replies: import("../entities/reply.entity").Reply[];
            LikeRoadmaps: import("../entities/roadmap.entity").Roadmap[];
            StoredRoadmaps: import("../entities/roadmap.entity").Roadmap[];
        };
        like: number;
        reply: number;
        id: string;
        category: string;
        public: boolean;
        title: string;
        contents?: string;
        thumbnail?: string;
        bgcolor?: string;
        created_at: Date;
        updated_at: Date;
        RoadmapItems: import("../entities/roadmap_item.entity").RoadmapItem[];
        RoadmapEdges: import("../entities/roadmap_edge.entity").RoadmapEdge[];
        StoringUsers: UserEntity[];
    }[]>;
    findByUser(id: string): Promise<{
        User: {
            id: string;
            email: string;
            nickname: string;
            comment?: string;
            image?: string;
            created_at: Date;
            updated_at: Date;
            Roadmaps: import("../entities/roadmap.entity").Roadmap[];
            Replies: import("../entities/reply.entity").Reply[];
            LikeRoadmaps: import("../entities/roadmap.entity").Roadmap[];
            StoredRoadmaps: import("../entities/roadmap.entity").Roadmap[];
        };
        like: number;
        reply: number;
        id: string;
        category: string;
        public: boolean;
        title: string;
        contents?: string;
        thumbnail?: string;
        bgcolor?: string;
        created_at: Date;
        updated_at: Date;
        RoadmapItems: import("../entities/roadmap_item.entity").RoadmapItem[];
        RoadmapEdges: import("../entities/roadmap_edge.entity").RoadmapEdge[];
        StoringUsers: UserEntity[];
    }[]>;
    findOne(id: string, mode?: string, user?: UserEntity): Promise<SaveRoadmapDto>;
    remove(user: UserEntity, id: string): Promise<boolean>;
    like(user: UserEntity, id: string): Promise<void>;
    unlike(user: UserEntity, id: string): Promise<void>;
    isLike(user: UserEntity, id: string): Promise<boolean>;
    uploadThumbnail(file: Express.Multer.File, id: string): Promise<string>;
}
